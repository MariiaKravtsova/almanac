{"data":{"site":{"siteMetadata":{"title":"Almanac","author":"Maria Kravtsova"}},"mdx":{"id":"c90992f3-38be-5fbe-aabc-66e62ad765cd","excerpt":"Here is a definition of data type, commonly referred as type: A data type is a classification of the type of data that a variable or object can hold in computer…","frontmatter":{"title":"A Case for PropTypes","date":"November 25, 2018"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Here is a definition of data type, commonly referred as type:`), React.createElement(MDXTag, {\n      name: \"blockquote\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"blockquote\"\n    }, `A data type is a classification of the type of data that a variable or object can hold in computer programming.`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Most programming languages I encountered in school were strictly typed. Meaning that if you defined that variable as type string, it will be a string and nothing else. Unlike Javascript where you don’t have to decide if a variable should be a boolean or a string, you can just change it at any time, or the interpreter will do so for you (see `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.destroyallsoftware.com/talks/wat\"\n      }\n    }, `wat`), `)`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If you think about it, when you create a variable and call it isRed you sort of made a binding contract with yourself that it will return a boolean. So if you created that variable in a strictly types language you would say boolean isRed at it’s definition, and if isRed is not a boolean then your program will warn you, yell at you, or simply give up.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Let’s be clear, we make mistakes, so types help us make less of them. Now, you say - get to the point, the title said PropTypes!!!`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This is the point - I am not terribly happy with Flow, in my opinion just go with TypeScript if you are going to go through the trouble. BUT - if you are working on a bigger project, or in teams, the minimal amount of effort you can put in avoiding type kind of mistakes/errors is to use PropTypes.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Because if I want to use the component Sidebar, we can look at the prop types which are `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `logo: string.isRequired; links: object; footer: instaceOf(Footer)`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `At least to me this is enough for me to use the component without reading how it really works. It’s kind of like a small wiki for that component.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `We use Ruby on the backend and in our model files we have comments of what the database table looks like. I think it is a working contract we have on our team to keep those comments up to date, and I think that is what prop types are as well. Sometimes they will just make a lot of unnecessary noise, but if they save you from one big bug - to me that is worth it.`));\n  }\n\n}"}}},"pageContext":{"slug":"/2018-11-25-prop-types/","previous":{"id":"a277db97-d93d-5d50-96f5-75cfe6cb2120","fields":{"slug":"/2018-06-05-A-Taste-of-Ruby/"},"frontmatter":{"title":"A Taste of Ruby"},"code":{"scope":""}},"next":{"id":"c234b2a6-d2b2-51af-a642-9aab5a7fc98c","fields":{"slug":"/2018-12-06-You-give-I-give/"},"frontmatter":{"title":"You give, I give, We can give"},"code":{"scope":""}}}}