{"data":{"site":{"siteMetadata":{"title":"Almanac","author":"Maria Kravtsova"}},"mdx":{"id":"a435e52d-1f06-5700-b899-2b3fe2e4455d","excerpt":"Usually when I have to install a new tool my steps are: Find the official setup documentation. Follow them. If I encounter the errors - google them, use the‚Ä¶","frontmatter":{"title":"Jest with React On Rails","date":"April 07, 2019"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Usually when I have to install a new tool my steps are:`), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Find the official setup documentation.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Follow them.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `If I encounter the errors - google them, use the most recent solutions I find on SO or Github. `), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Enjoy the tool.`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `When I tried to follow these steps for setting up Jest on my React app, which is baked through React on Rails I ended up wasting 2 days of my life. Well, and maybe 1 day of my co-worker and all my friend‚Äôs lives. I ended up downgrading version, upgrading versions. I was in crunch mode, and the decision was made that JS tests shouldn‚Äôt hold up this project. `), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `A few weeks later it was time to try again. This time I was determined to actually understand the babel tools that you are supposedly needed (every search result says you need a different tool and config ü§¶‚Äç‚ôÄÔ∏è)`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `So here were I was starting at:`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Rails 5 app, Webpacker 3.5, React On Rails 11, React 16.5 and a partridge in a pear tree‚Ä¶`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I found this useful list of things I will need to understand from `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://medium.freecodecamp.org/how-to-set-up-jest-enzyme-like-a-boss-8455a2bc6d56\"\n      }\n    }, `Adeel Imran`), ` and I started there:`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `@babel/core`), `¬†Since generally we use webpack to compile our react code. Babel is a major dependency that helps tell webpack how to compile the code. This is a peer dependency for using Jest as well.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `@babel/polyfil`), `¬†Jest requires a thing called¬†`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `regenerator-runtime`), `, @babel/polyfill comes built-in with it and some other cool features.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `@babel/preset-env`), `¬†&¬†`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `@babel/preset-react`), `¬†Is for features like ES6 and React, so while writing unit tests¬†`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Jest`), `¬†knows about¬†`, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `ES6`), `¬†syntax and¬†`, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `JSX.`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `babel-core`), `¬†This is mostly a dependency for¬†`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Jest`), `, as we need¬†`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `babel-core`), `¬†for Jest to work.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `babel-jest`), `¬†Will help Babel understand the code we write in¬†`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Jest`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `enzyme`), `¬†This is an assertion library that makes it easier to assert, manipulate, and traverse your React Components‚Äô output.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `enzyme-adapter-react-16`), `¬†An adapter/middle-ware to help Jest connect with¬†`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `enzyme`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `jest`), `¬†Jest is the test library on which we will run our tests.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I googled and research each of those, but did not install anything yet, because some things seem extra. Also I needed the app to still run! Packages I ended up installing (note I believe in snapshot tests, so I needed enzyme):`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `\"babel-jest\": \"^23.6.0\",\n\"jest\": \"^23.5.0\",\n\"enzyme\": \"^3.9.0\",\n\"enzyme-adapter-react-16\": \"^1.11.2\",\n\"jest-enzyme\": \"^7.0.2\",\n\"regenerator-runtime\": \"^0.13.2\",\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Jest config:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `\"jest\": {\n    \"roots\": [\n      \"app/javascript\"\n    ],\n    \"moduleDirectories\": [\n      \"node_modules\",\n      \"app/javascript/packs\"\n    ],\n    \"setupTestFrameworkScriptFile\": \"./node_modules/jest-enzyme/lib/index.js\",\n    \"moduleNameMapper\": {\n      \"\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)\\$\": \"<rootDir>/test/javascript/__mocks__/fileMock.js\",\n      \"\\\\.(css|less)\\$\": \"<rootDir>/app/javascript/__mocks__/styleMock.js\"\n    }\n}\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `.babelrc note this only changes test environment:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `\"env\": {\n    \"test\": {\n      \"presets\": [[\"env\"], \"react\"],\n      \"plugins\": [\n        \"syntax-dynamic-import\",\n        \"transform-object-rest-spread\",\n        [\n          \"transform-class-properties\",\n          {\n            \"spec\": true\n          }\n        ]\n      ]\n    }\n  }\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Hopefully you find this useful.`));\n  }\n\n}"}}},"pageContext":{"slug":"/add-jest-ror/","previous":{"id":"5eb7885d-6654-5949-acd1-12625faa5f1e","fields":{"slug":"/watch-n-learn-w6/"},"frontmatter":{"title":"Watch and Learn Week 6"},"code":{"scope":""}},"next":{"id":"64c6bc25-d733-5489-844f-e9be9775a2e0","fields":{"slug":"/watch-n-learn-w7/"},"frontmatter":{"title":"Watch and Learn Week 7"},"code":{"scope":""}}}}