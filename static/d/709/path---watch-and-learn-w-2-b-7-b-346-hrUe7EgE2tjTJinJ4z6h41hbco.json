{"data":{"site":{"siteMetadata":{"title":"Almanac","author":"Maria Kravtsova"}},"mdx":{"id":"e8615259-c84d-585f-84b0-2a6f23542026","excerpt":"On Writing Software Well #4: Not every model is backed by a database You can use model composition and mixins on a vanilla Ruby class that can provide you withâ€¦","frontmatter":{"title":"Watch and Learn Week 2","date":"January 12, 2019"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"h2\",\n      props: {\n        \"href\": \"https://www.youtube.com/watch?v=MQw9zF9IehI\"\n      }\n    }, `On Writing Software Well #4: Not every model is backed by a database`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You can use model composition and mixins on a vanilla Ruby class that can provide you with easier access of methods, and aggregation of all the considerations/qualities of something. (ex: User Notifications can come from a sender and receiver, where the model user notifications holds the methods that are shared by the later). This is a good pattern for a cleaner API calls.`), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"h2\",\n      props: {\n        \"href\": \"https://www.youtube.com/watch?v=M3BM9TB-8yA\"\n      }\n    }, `10 Things I Regret About Node.js - Ryan Dahl`)), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Not sticking with Promises, they are necessary for async/await abstractions.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Security, could have utilized v8 out of box security more.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Build System (GYP), itâ€™s a non-JSON, python adaptation of JSON.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `package.json, because itâ€™s required and creates boilerplate noise.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `node_modules, itâ€™s too big and complex.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `The need to include extension in require.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `index.js, unnecessarily cute`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/denoland/deno\"\n      }\n    }, `Deno`), ` is pretty good`), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"h2\",\n      props: {\n        \"href\": \"https://www.youtube.com/watch?v=zEf6iUIkjf4\"\n      }\n    }, `Streaming from RubyKaigi with Matz!`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Nominal typing (focusing on behavior vs strict type) - compiler has to be smarter.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Matz uses Emacs ðŸ¤ª and he didnâ€™t want to do TDD.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `watching Matz working on this was awesome ðŸ¥´`), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"h2\",\n      props: {\n        \"href\": \"https://www.youtube.com/watch?v=pBginuIW2WU\"\n      }\n    }, `Surgically Refactoring Ruby with Suture by Justin Searls`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Legacy code - code we donâ€™t understand enough to change with confidence ðŸ’œ`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Refactoring is hard to sell to business people because itâ€™s a higher risk and low business priority. Habitual refactoring is nice, except it requires a lot of discipline from the team.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.amazon.com/Refactoring-Ruby-Addison-Wesley-Professional/dp/0321984137/ref=sr_1_1?s=books&ie=UTF8&qid=1547174493&sr=1-1&keywords=Refactoring+ruby\"\n      }\n    }, `Refactoring patterns`), `:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `extract method`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `pull up/push down`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `split loop`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052\"\n      }\n    }, `Characterization Testing`)))), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `A/B Testing/Experiment (Scientist  gem)`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `So the middle ground is `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/testdouble/suture\"\n      }\n    }, `Suture`)), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Plan the refactor`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Cut`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Record`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Validate against old code`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Refactor`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Verify`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Compare (run side by side)`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Fallback (prod)`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Delete`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `ðŸŒŸ `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.sandimetz.com/99bottles/\"\n      }\n    }, `99 Bottles of OP`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Judge libraries by their error messages.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/michaelfeathers/scythe\"\n      }\n    }, `Scythe`), ` - see what code has not been used`), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"h2\",\n      props: {\n        \"href\": \"https://www.youtube.com/watch?v=M0yO5sPxp-w\"\n      }\n    }, `Keynote: Unlearning - The Challenge of Change by Jessie Shternshus`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Three levels of unlearning: individual, group, organization`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Unlearning is much harder as you grow older, but it is possible. It helps to  be curious, to experiment, to look up and not be hyperfocused.`), React.createElement(MDXTag, {\n      name: \"blockquote\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"blockquote\"\n    }, `Transformation is not a transactional activity, itâ€™s ongoing changes over time. - Dan North`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `How can  I help my team make changes?`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Surface the resistance`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Hear what they have to say`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Identify the value for them to change`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Find ways to break down barriers`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Train them with experiential methods day by day`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Escape thinking, conduct unlearning reviews, try improv, practice unlearning.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Walk shop`), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"h2\",\n      props: {\n        \"href\": \"https://www.youtube.com/watch?v=jnC-JvbqnlA\"\n      }\n    }, `Humans Arenâ€™t APIs And Your Request Is 400 Denied by Jennifer Tu`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `When your message doesnâ€™t land the first time, that is not a failure, itâ€™s the beginning of a dialog.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If you receive feedback on your idea, and the person doesnâ€™t totally agree with it, take this as a gift because that person trusted you to share it with you. Next time they might not feel comfortable doing so if you donâ€™t appreciate it.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Donâ€™t procrastinate on an agreement.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If someone disagrees with you, take a paus to understand what that means, some questions to ask yourself:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Is it really worth it?`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Why is this important? What will happen if we donâ€™t go through with this?`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `How will other people feel if it succeeds?`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Why do they feel the way they do?`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `How will I look back on this in a year?`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Perhaps share some of those answers with the person.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If they are unwilling and disagree - then Stop, Drop and Listen. (start the conversation when they are ready to listen, agree on some time)`), React.createElement(MDXTag, {\n      name: \"blockquote\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"blockquote\"\n    }, `Make the change easy, then make the easy change.`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To be a better listener:`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If someone is not ready to talk, donâ€™t push it.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Do they want to be persuaded? Could they be persuaded?`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Show that you care.`), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"h2\",\n      props: {\n        \"href\": \"https://www.youtube.com/watch?v=8OOTVxKDwe0\"\n      }\n    }, `Branch in Time by Tekin Suleyman`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `git log -S \"name\" â€”patch â€”reverse`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Your software is more than the code. We build institutional knowledge when we work on a software and shift code to satisfy new requirements, bug fixes.  Programmers have to hold mental models, and git provides us a way to help us with it because teams constantly change.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"http://git.wtf\"\n      }\n    }, `git.wtf`), ` and `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"http://tekin.co.uk\"\n      }\n    }, `tekin.co.uk`)), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Donâ€™t commit with -m`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `commit verbose mode = true`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Capture why not what`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `If you want to write a comment in the code - put it in the commit`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Create minimum viable commit`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Treat commit as mutable`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Donâ€™t fear rebase`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, `Use pickaxe instead of blame`)));\n  }\n\n}"}}},"pageContext":{"slug":"/watch-and-learn-w2/","previous":{"id":"a6d430cc-adda-5349-8f68-030f1a918b38","fields":{"slug":"/2019-01-05-watch-and-learn-w1/"},"frontmatter":{"title":"Watch and Learn Week 1"},"code":{"scope":""}},"next":null}}